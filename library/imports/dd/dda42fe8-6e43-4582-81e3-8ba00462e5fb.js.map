{"version":3,"sources":["../../../../assets/scripts/assets/scripts/music.js"],"names":["cc","Class","extends","Component","properties","music","type","AudioClip","default","mgr","Node","item","Prefab","onLoad","console","log","i","instantiate","addChild","y","x","window","AudioContext","webkitAudioContext","mozAudioContext","msAudioContext","onClick","audioContext","audioBufferSourceNode","createBufferSource","buffer","_audio","analyser","createAnalyser","fftSize","connect","destination","start","onStop","stop","update","dt","dataArray","Uint8Array","frequencyBinCount","getByteFrequencyData","draw","h","node","children","height","misc","lerp"],"mappings":";;;;;;AACAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,eAAO;AACHC,kBAAMN,GAAGO,SADN;AAEHC,qBAAS;AAFN,SADC;AAKRC,aAAKT,GAAGU,IALA;AAMRC,cAAMX,GAAGY;AAND,KAHP;;AAYLC,UAZK,oBAYK;AACNC,gBAAQC,GAAR,CAAY,KAAKV,KAAjB;AACA;AACA,aAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AACzB,gBAAIL,OAAOX,GAAGiB,WAAH,CAAe,KAAKN,IAApB,CAAX;AACA,iBAAKF,GAAL,CAASS,QAAT,CAAkBP,IAAlB;AACAA,iBAAKQ,CAAL,GAAS,CAAT;AACAR,iBAAKS,CAAL,GAAS,CAAC,GAAD,GAAOJ,IAAI,EAAX,GAAgB,EAAzB;AACH;AACD;AACAK,eAAOC,YAAP,GAAsBD,OAAOC,YAAP,IAAuBD,OAAOE,kBAA9B,IAAoDF,OAAOG,eAA3D,IAA8EH,OAAOI,cAA3G;AACH,KAvBI;AAyBLC,WAzBK,qBAyBM;AACP,YAAIJ,eAAeD,OAAOC,YAA1B;AACA;AACA,YAAIK,eAAe,IAAIL,YAAJ,EAAnB;AACA;AACA;AACA;AACA,aAAKM,qBAAL,GAA6BD,aAAaE,kBAAb,EAA7B;AACA;AACA,aAAKD,qBAAL,CAA2BE,MAA3B,GAAoC,KAAKzB,KAAL,CAAW0B,MAA/C;AACA;AACA,aAAKC,QAAL,GAAgBL,aAAaM,cAAb,EAAhB;AACA;AACA,aAAKD,QAAL,CAAcE,OAAd,GAAwB,GAAxB;AACA;AACA,aAAKN,qBAAL,CAA2BO,OAA3B,CAAmC,KAAKH,QAAxC;AACA;AACA,aAAKA,QAAL,CAAcG,OAAd,CAAsBR,aAAaS,WAAnC;AACA;AACA,aAAKR,qBAAL,CAA2BS,KAA3B,CAAiC,CAAjC;AACH,KA7CI;AA+CLC,UA/CK,oBA+CK;AACN;AACA,aAAKV,qBAAL,CAA2BW,IAA3B;AACH,KAlDI;AAoDLC,UApDK,kBAoDGC,EApDH,EAoDO;AACR;AACA,YAAI,CAAC,KAAKT,QAAV,EAAoB;AACpB;AACA,aAAKU,SAAL,GAAiB,IAAIC,UAAJ,CAAe,KAAKX,QAAL,CAAcY,iBAA7B,CAAjB;AACA;AACA,aAAKZ,QAAL,CAAca,oBAAd,CAAmC,KAAKH,SAAxC;AACA,aAAKI,IAAL,CAAU,KAAKJ,SAAf;AACH,KA5DI;AA8DLI,QA9DK,gBA8DCJ,SA9DD,EA8DY;AACb;AACA;AACA,aAAK,IAAI1B,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AACzB,gBAAI+B,IAAIL,UAAU1B,IAAI,CAAd,IAAmB,GAA3B;AACA,gBAAI+B,IAAI,CAAR,EAAWA,IAAI,CAAJ;AACX;AACA,gBAAIC,OAAO,KAAKvC,GAAL,CAASwC,QAAT,CAAkBjC,CAAlB,CAAX;AACAgC,iBAAKE,MAAL,GAAclD,GAAGmD,IAAH,CAAQC,IAAR,CAAaJ,KAAKE,MAAlB,EAA0BH,CAA1B,EAA6B,GAA7B,CAAd;AACH;AACJ;AAxEI,CAAT","file":"music.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        music: {\n            type: cc.AudioClip,\n            default: null\n        },\n        mgr: cc.Node,\n        item: cc.Prefab\n    },\n\n    onLoad () {\n        console.log(this.music);\n        // 实例化 item\n        for (let i = 0; i < 40; i++) {\n            let item = cc.instantiate(this.item);\n            this.mgr.addChild(item);\n            item.y = 0;\n            item.x = -480 + i * 24 + 12;\n        }\n        // 处理不同平台\n        window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;\n    },\n\n    onClick () {\n        let AudioContext = window.AudioContext;\n        // audioContext 只相当于一个容器。\n        let audioContext = new AudioContext();\n        // 要让 audioContext 真正丰富起来需要将实际的音乐信息传递给它的。\n        // 也就是将 AudioBuffer 数据传递进去。\n        // 以下就是创建音频资源节点管理者。\n        this.audioBufferSourceNode = audioContext.createBufferSource();\n        // 将 AudioBuffer 传递进去。\n        this.audioBufferSourceNode.buffer = this.music._audio;\n        // 创建分析器。\n        this.analyser = audioContext.createAnalyser();\n        // 精度设置\n        this.analyser.fftSize = 256;\n        // 在传到扬声器之前，连接到分析器。\n        this.audioBufferSourceNode.connect(this.analyser);\n        // 连接到扬声器。\n        this.analyser.connect(audioContext.destination);\n        // 开始播放\n        this.audioBufferSourceNode.start(0);\n    },\n\n    onStop () {\n        // 停止方法\n        this.audioBufferSourceNode.stop();\n    },\n\n    update (dt) {\n        // 等待准备好\n        if (!this.analyser) return;\n        // 建立数据准备接受数据\n        this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n        // 分析结果存入数组。\n        this.analyser.getByteFrequencyData(this.dataArray);\n        this.draw(this.dataArray);\n    },\n\n    draw (dataArray) {\n        // 数值自定\n        // 960 / 40 有 24 ; 128 / 40 取 3\n        for (let i = 0; i < 40; i++) {\n            let h = dataArray[i * 3] * 1.5;\n            if (h < 5) h = 5;\n            // this.mgr.children[i].height = h;\n            let node = this.mgr.children[i];\n            node.height = cc.misc.lerp(node.height, h, 0.4);\n        }\n    }\n\n});\n"]}